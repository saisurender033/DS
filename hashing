// open hashing //

#include<stdio.h>
#include<stdlib.h>

int hash(int x)
{
return x%10;
}

void insert(int a[10],int x)
{
int i=hash(x);
int flag=0,j;
if(a[i]==-1)
{
a[i]=x;
flag=1;
}
else
{
for(j=i+1;j<10;j++)
{
if(a[j]==-1)
{
a[j]=x;
flag=1;
break;
}
}
for(j=0;(j<i)&&(flag==0);j++)
{
if(a[j]==-1)
{
a[j]=x;
flag=1;
break;
}
}
}
if(flag==0)
{
printf("no slot to insert\n");
}
}

void search(int a[10],int x)
{
int i=hash(x);
int flag=0,j;
if(a[i]==x)
{
//printf("element found\n");
flag=1;
}
else
{
for(j=i+1;j<10;j++)
{
if(a[i]==x)
{
//printf("element found\n");
flag=1;
break;
}
}
for(j=0;(j<i)&&(flag=0);j++)
{
if(a[j]==x)
{
flag=1;
break;
}
}
}
if(flag)
{
printf("element found\n");
}
else
{
printf("element not found\n");
}
}

void del(int a[10],int x)
{
int i=hash(x);
int flag=0,j;
if(a[i]==x)
{
a[i]=-1;
flag=1;
}
else
{
for(j=i+1;j<10;j++)
{
if(a[j]==x)
{
a[j]=-1;
flag=1;
break;
}
}
for(j=0;(j<i)&&(flag=0);j++)
{
if(a[j]==x)
{
a[j]=-1;
flag=1;
break;
}
}
}
if(flag==0)
{
printf("element not found\n");
}
}

void display(int a[10])
{
int i;
for(i=0;i<10;i++)
{
printf("%d\n",a[i]);
}
}

int main()
{
int i,a[10];
for(i=0;i<10;i++)
{
a[i]=-1;
}
int ch,x;
while(1)
{
printf("1:insert\n2:search\n3:delete\n4:display\n5:exit\n");
printf("enter ur choice\n");
scanf("%d",&ch);
switch(ch)
{
case 1:printf("enter element to insert\n");
scanf("%d",&x);
insert(a,x);
break;
case 2:printf("enter element to search\n");
scanf("%d",&x);
search(a,x);
break;
case 3:printf("enter element to delete\n");
scanf("%d",&x);
del(a,x);
break;
case 4:display(a);
break;
case 5:exit(0);
default:printf("enter valid choice\n");
}
}
}


// sepearate chaining //

#include<stdio.h>
#include<stdlib.h>

struct hashtable
{
    int data;
    struct hashtable *next;
};

typedef struct hashtable node;

int hash(int x)
{
    return x%10;
}

void insert(node *t[10],int x)
{
    int i=hash(x);
    node *p=(node*)malloc(sizeof(node));
    p->data=x;
    p->next=NULL;
    if(t[i]->next==NULL)
    {
        t[i]->next=p;
    }
    else
    {
        p->next=t[i]->next;
        t[i]->next=p;
    }
}

void search(node *t[10],int x)
{
    int i=hash(x);
    int flag=0;
    node *temp=t[i]->next;
    while(temp!=NULL)
    {
        if(temp->data==x)
        {
            printf("element found\n");
            flag=1;
            break;
        }
        else
        {
            temp=temp->next;
        }
    }
    if(flag==0)
    {
        printf("element not found\n");
    }
}

void del(node *t[10],int x)
{
    int i=hash(x);
    int flag=0;
    node *temp=t[i]->next;
    node *temp1=t[i];
    while(temp!=NULL)
    {
        if(temp->data==x)
        {

            flag=1;
            break;
        }
        else
        {
            temp1=temp;
            temp=temp->next;
        }
    }
    if(flag)
    {
        temp1->next=temp->next;
        free(temp);
    }
    else
    {
        printf("element not found\n");
    }
}

void display(node *t[10])
{
    node *temp;
    int i;
    for(i=0;i<10;i++)
    {
        temp=t[i]->next;
        printf("||%d->",i);
        while(temp!=NULL)
        {
            printf("|%d|->",temp->data);
            temp=temp->next;
        }
        printf("NULL\n");
    }
}

void main()
{
    int i,ch,x;
    node *t[10];
    for(i=0;i<10;i++)
    {
        t[i]=(node*)malloc(sizeof(node));
        t[i]->next=NULL;
    }
    while(1)
    {
        printf("1:insert\n2:search\n3:delete\n4:display\n5:exit\n");
        printf("enter ur choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("enter element to insert\n");
            scanf("%d",&x);
            insert(t,x);
            break;
            case 2:printf("enter element to be search\n");
            scanf("%d",&x);
            search(t,x);
            break;
            case 3:printf("enter element to delete\n");
            scanf("%d",&x);
            del(t,x);
            break;
            case 4:display(t);
            break;
            case 5:exit(0);
            default:printf("enter valid choice\n");
        }
    }
}
